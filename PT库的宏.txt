PT_INIT(pt)   初始化任务变量，只在初始化函数中执行一次就行

PT_BEGIN(pt)   启动任务处理，放在函数开始处 

PT_END(pt)   结束任务，放在函数的最后 

PT_WAIT_UNTIL(pt,条件);
这个语句的功能是，如果条件不成立，那么暂时退出当前任务，先处理别的任务，再回来看看。如果条件成立了（条件可以为时钟或其它变量，IO等），那么继续往下执行。第一个变量pt我个人建议别改啦。

PT_WAIT_WHILE(pt,条件);
作用和上面的相反，条件成立则切换任务，条件不成立则继续执行。

PT_WAIT_THREAD(pt,任务x名);
等到任务x完成了（任务x运行到PT_END了）才继续执行。x应为一次性任务而不是循环任务。

PT_SPAWN(pt, child, thread) 新建一个子任务，并等待其执行完退出 

PT_RESTART(pt);重启当前任务

PT_EXIT(pt);退出并注销当前任务，任务后面的部分不执行，直接退出重新执行 

PT_YIELD(pt);把CPU让给别的任务用一下下，用完了我再继续用。

PT_YIELD_UNTIL(pt, cond) 锁死任务并在等待条件成立，恢复执行 


（下面的是定时器，该宏是我自己写的，用之前请在#include "pt.h" 的前面，前面啊！加上一句#define PT_USE_TIMER）
先说明一下，下面的定时不一定完全准确的，可能会有点点的误差，可能偏后。如果遇上了很烦的任务，有可能会使延时延后。但是正常情况下，直接用就好了。
如果要很精确的延时，请用delay语句或者计时器，但是，绝大多数情况下请用下面的语句代替delay延时！这样才能把CPU让给别的任务使用。

PT_TIMER_DELAY(pt,延时毫秒数);
字面上的意思，不用多说了吧？最大值约为49.7天，估计没人会延时辣么久吧……

PT_TIMER_MICRODELAY(pt，延时微秒数);
字面上的意思，不用多说了吧？注意，最小精度与arduino的版本有关，与micros()有精度一致。

PT_TIMER_WAIT_TIMEOUT(pt,条件,毫秒数);
如果条件成立了，或者超时了，就继续运行，否则切换任务。

信号量的用法：
一、在#include "pt.h"前面加上一句 #define PT_USE_SEM

二、创建一个信号量，这个一定是全局变量：
static struct pt_sem 信号量名;

三、在setup()函数里面给它初始化：
PT_SEM_INIT(&信号量名，数量);
信号量名前面有个&，别忘了。数量就相当于停车场的总车位数。

四、然后要用啦。任务要停一辆车进去：
PT_SEM_WAIT(pt,&信号量名);
信号量名前面有个&，别忘了。一个语句只能停一辆车，土豪好多车就用多次。

五、任务要开一辆车出来：
PT_SEM_SIGNAL(pt,&信号量名);
信号量名前面有个&，别忘了。用一次出一辆。

当然，对于一个任务来说，信号量没上限，就是说，你可以在停车场内再开辟新的车位，不断用PT_SEM_SIGNAL()就好了。

其实信号量这货解决的问题中，比较出名的是生产者与消费者问题。简单地说，消费者要买，必须要生产者生产才能买到，没生产出来，消费者只能等。

